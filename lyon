#!/usr/bin/python

###############################################################################
#                                                                             #
#                          lyon shell file browser v1.2                       #
#                                                                             #
###############################################################################
#                                                                             #
#          Copyright (c) 2019 Peter Max Guertler, coder@sonensei.ch           #
#                                                                             #
###############################################################################
#                                                                             #
# Permission is hereby granted, free of charge, to any person obtaining a     #
# copy of this software and associated documentation files (the "Software"),  #
# to deal in the Software without restriction, including without limitation   #
# the rights to use, copy, modify, merge, publish, distribute, sublicense,    #
# and/or sell copies of the Software, and to permit persons to whom the       #
# Software is furnished to do so, subject to the following conditions:        #
#                                                                             #
# The above copyright notice and this permission notice shall be included     #
# in all copies or substantial portions of the Software.                      #
#                                                                             #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     #
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         #
# DEALINGS IN THE SOFTWARE.                                                   #
#                                                                             #
###############################################################################

import curses
import os
import sys
import string
import traceback
import subprocess
#import logging


CMD_VIEW = 'less'
CMD_EDIT = 'vi'
CMD_SHELL = os.path.expandvars('$SHELL')

INITIAL_COLUMN_WIDTH = 20

HELP_TEXT = [
	"                                                ",
	"                                                ",
	"  ********************************************  ",
	"  *       lyon shell file browser  1.2       *  ",
	"  *                                          *  ",
	"  *     Copyright by Peter Max Guertler      *  ",
	"  *            coder@sonensei.ch             *  ",
	"  *                                          *  ",
	"  * Keyboard Shortcuts:                      *  ",
	"  *                                          *  ",
	"  * ?               : Show this help page    *  ",
	"  *                                          *  ",
	"  * h / left arrow  : Move to parent folder  *  ",
	"  * l / right arrow : Move to child folder   *  ",
	"  * j / down arrow  : Move to next file      *  ",
	"  * k / up arrow    : Move to previous file  *  ",
	"  * shift up/down   : Move page up/down      *  ",
	"  *                                          *  ",
	"  * v               : View file with 'less'  *  ",
	"  * e               : Edit file with 'vi'    *  ",
	"  * s               : Open shell at location *  ",
	"  * r               : Reload                 *  ",
	"  *                                          *  ",
	"  * +               : Increase column width  *  ",
	"  * -               : Decrease column width  *  ",
	"  *                                          *  ",
	"  * q / x           : Exit lyon              *  ",
	"  *                                          *  ",
	"  ********************************************  ",
	"                                                ",
	"                                                ",
]

def safe_str(unsafe_str):
    safe = ""
    for c in unsafe_str:
        if c in string.printable:
            safe += c
        else:
            safe += '?'
    return safe

class SelectorElement:
	def __init__(self):
		self.default_selection = None
		self.children = {}

	def get_child(self, name):
		if name in self.children:
			c = self.children[name]
		else:
			c = SelectorElement()
			self.children[name] = c
		return c


class DefaultSelector:
	def __init__(self):
		self.root_selector_element = SelectorElement()

	def set_current(self, path):
		s = ""
		selector_element = self.root_selector_element
		for f in path:
			selector_element.default_selection = f
			selector_element = selector_element.get_child(f)
			s += f + "#"

	def get_default_selection(self, path):
		s = ""
		selector_element = self.root_selector_element
		for f in path:
			selector_element = selector_element.get_child(f)
			s += f + "#"
		return selector_element.default_selection


class FileEntry:
	def __init__(self, name, isdir):
		self.name = name
		self.isdir = isdir

	@staticmethod	
	def _cmp_file_entries(s1, s2):
	    return cmp(string.lower(s1.name), string.lower(s2.name))

	@staticmethod
	def read_file_entries(folder):
		result = []
		try:
			list = os.listdir(folder)
		except:
			list = []
		for f in list:
			try:
				full_path = os.path.join(folder, f)
				isdir = os.path.isdir(full_path)
			except:
				isdir = None
			result.append(FileEntry(f, isdir))
		result.sort(FileEntry._cmp_file_entries)
		return result


class Column:
	def __init__(self, full_path):
		self.full_path = full_path
		self.file_entries = FileEntry.read_file_entries(self.full_path)
		self.selection_index = -1
		self.child_column = None
		self.folder_selected = False

	def get_all_columns(self):
		all_cols = []
		c = self
		while not(c is None):
			all_cols.append(c)
			c = c.child_column
		return all_cols

	def selected_name(self):
		if self.selection_index < 0:
			return None
		else:
			return self.file_entries[self.selection_index].name

	def select_child(self, name):
		index = 0
		for f in self.file_entries:
			if f.name == name:
				self.select(index)
				return self.child_column
			index += 1
		return None
		
	def select(self, index):
		if index < 0 or index >= len(self.file_entries):
			self.selection_index = -1
			self.child_column = None
			self.folder_selected = None
		else:
			self.selection_index = index
			child_path = os.path.join(self.full_path, self.file_entries[index].name)
			if os.path.isdir(child_path):
				self.child_column = Column(child_path)
				self.folder_selected = True
			else:
				self.child_column = None
				self.folder_selected = False

	def last(self):
		c = self
		while not(c.child_column is None):
			c = c.child_column
		return c

	def select_next(self):
		if len(self.file_entries) == 0:
			self.select(-1)
			return
		if self.selection_index < 0:
			self.select(0)
		else:
			if self.selection_index < len(self.file_entries) - 1:
				self.select(self.selection_index + 1)

	def select_prev(self):
		if len(self.file_entries) == 0:
			self.select(-1)
			return
		if self.selection_index > 0:
			self.select(self.selection_index - 1)
		else:
			self.select(0)

	def select_next_n(self, n):
		if len(self.file_entries) == 0:
			self.select(-1)
			return
		if self.selection_index < 0:
			self.select(0)
		else:
			if self.selection_index < len(self.file_entries) - 1:
				self.select(min(self.selection_index + n, len(self.file_entries) - 1))

	def select_prev_n(self, n):
		if len(self.file_entries) == 0:
			self.select(-1)
			return
		if self.selection_index > 0:
			self.select(max(self.selection_index - n, 0))
		else:
			self.select(0)


class LyonModel:
	def __init__(self, stdscr, path_elements):
		self.view = LyonView(stdscr)
		self.default_selector = DefaultSelector()
		self.root_column = None
		self.focus_column = None
		self.init_path(path_elements)
		self.update_default_selection()

	def init_path(self, path_elements):
		self.root_column = Column('/')
		curr_col = self.root_column
		self.focus_column = self.root_column
		for p in path_elements:
			self.focus_column = curr_col
			curr_col = curr_col.select_child(p)
			if curr_col is None:
				break
		self.view.show_help = False
		self.view.write_screen(self.root_column)


	def update_default_selection(self):
		col = self.root_column.last()
		if col.selected_name():
			path_to_file = os.path.join(col.full_path, col.selected_name())
		else:
			path_to_file = col.full_path
		path_elements_with_empty = path_to_file.split(os.sep)
		path_no_empty = [x for x in path_elements_with_empty if x]
		self.default_selector.set_current(path_no_empty)

	def reload(self):
		col = self.root_column.last()
		if col.selected_name():
			path_to_file = os.path.join(col.full_path, col.selected_name())
		else:
			path_to_file = col.full_path
		path_elements_with_empty = path_to_file.split(os.sep)
		path_no_empty = [x for x in path_elements_with_empty if x]
		self.init_path(path_no_empty)

	def parent(self, col):
		p = self.root_column;
		c = p.child_column
		while c and c != col:
			p = c
			c = c.child_column
		if p == col:
			return None
		else:
			return p

	def get_default_selection(self):
		col = self.focus_column
		path = col.full_path
		path_elements_with_empty = path.split(os.sep)
		path_no_empty = [x for x in path_elements_with_empty if x]
		return self.default_selector.get_default_selection(path_no_empty)

	def move_right(self):
		if (self.focus_column.child_column and len(self.focus_column.child_column.file_entries) > 0):
			self.focus_column = self.focus_column.child_column
			if len(self.focus_column.file_entries) > 0:
				sel = self.get_default_selection()
				if sel:
					self.focus_column.select_child(sel)
					if self.focus_column.selection_index < 0:
						self.focus_column.select(0)
				else:
					self.focus_column.select(0)

	def move_left(self):
		if self.focus_column != self.root_column:
			parent = self.parent(self.focus_column)
			if parent:
				self.focus_column.select(-1)
				self.focus_column = parent


class LyonView:
	def __init__(self, stdscr):
		self.stdscr = stdscr
		self.column_width = INITIAL_COLUMN_WIDTH
		self.show_help = False

	def write_screen(self, root_column):
		self.stdscr.clear()
		if self.show_help:
			self._write_help_screen()
		else:
			self._write_file_browser(root_column)

	def _write_file_browser(self, root_column):
		max_y, max_x = self.stdscr.getmaxyx()
		max_x -= 1

		max_col_width = ((max_x) / 2) - 1
		actual_col_width = min(max_col_width, self.column_width)
		disp_col_count = max_x / actual_col_width
	
		self._write_current_selection(root_column, max_x, max_y)	
		
		x = 0
		col = self._find_first_column_on_screen(disp_col_count, root_column)
		while (not(col is None)):
			self._write_column(max_x, max_y, x, actual_col_width, col)
			x += actual_col_width
			col = col.child_column

	def _write_column(self, max_x, max_y, x, actual_col_width, col):
		x_sep = x + actual_col_width - 1
		if x_sep < max_x - 1:
			for y_sep in range(0, max_y - 1):
				self.stdscr.addstr(y_sep, x_sep, '|')

		y = -self._get_col_offset(col, max_y)
		file_index = 0
		for f in col.file_entries:
			if (y >= 0 and y < max_y - 1):
				self._write_file_entry(max_x, x, y, actual_col_width, col, file_index, f)
			y += 1
			file_index += 1

	def _write_file_entry(self, max_x, x, y, actual_col_width, col, file_index, f):
		try:
			s = safe_str(f.name)[:actual_col_width-2].ljust(actual_col_width-2, " ")
			if col.selection_index == file_index:
				self.stdscr.addstr(y, x, s, curses.A_REVERSE)
			else:
				self.stdscr.addstr(y, x, s)
		except:
			print(traceback.format_exc())
		x_dirmarker = x + actual_col_width - 2
		if x_dirmarker < max_x - 1:
			if f.isdir is None:
				dirmarker = '?'
			elif f.isdir:
				dirmarker = '>'
			else:
				dirmarker = ' '
			if col.selection_index == file_index:
				self.stdscr.addstr(y, x_dirmarker, dirmarker, curses.A_REVERSE)
			else:
				self.stdscr.addstr(y, x_dirmarker, dirmarker)

	def _write_current_selection(self, root_column, max_x, max_y):
		last_col = root_column.last()
		if last_col.selection_index < 0:
			p = last_col.full_path
		else:
			p = os.path.join(last_col.full_path, last_col.selected_name())
                safe_p = safe_str(p)
		if len(safe_p) > max_x:
			safe_p = safe_p[-max_x:]
		self.stdscr.addstr(max_y - 1, 0, safe_p)

	def _write_help_screen(self):
		s = self.stdscr
		max_y, max_x = s.getmaxyx()
		y = 2
		for l in HELP_TEXT:
			if y < max_y:
				trimmed = l[:(max_x - 3)]
				string.zfill("A", 33)
				s.addstr( y, 2, trimmed)
			y += 1

	def _get_col_offset(self, col, max_y):
		if (col.selection_index < 0):
			return 0
		delta_bottom = 5
		offset = col.selection_index + delta_bottom - max_y
		o = min(offset, len(col.file_entries) - max_y + 1)
		if o > 0:
			return o
		else:
			return 0

	def _find_first_column_on_screen(self, col_count, root_column):
		all_cols = root_column.get_all_columns()
		if len(all_cols) < 1:
			return all_cols[0]
		last_col = all_cols[-1]
		if last_col.selection_index >= 0 and not(last_col.folder_selected):
			count_selectable = len(all_cols) + 1
		else:
			count_selectable = len(all_cols)
			
		index = count_selectable - col_count
		non_zero_index = max(index, 0)
		return all_cols[non_zero_index]


class LyonController:
	def __init__(self, stdscr, path_elements):
		self.stdscr = stdscr
		self.model = LyonModel(stdscr, path_elements)
		self.key_handlers = self._build_key_handlers()

	def _build_key_handlers(self):
		k = {}

		k[104]               = self.move_left          # h
		k[curses.KEY_LEFT]   = self.move_left          # cursor left
		k[108]               = self.move_right         # l
		k[curses.KEY_RIGHT]  = self.move_right         # cursor right
		k[106]               = self.move_down          # j
		k[curses.KEY_DOWN]   = self.move_down          # cursor down
		k[107]               = self.move_up            # k
		k[curses.KEY_UP]     = self.move_up            # cursor up

		k[74]                = self.page_down          # J
		k[336]               = self.page_down          # shift + cursor down
		k[75]                = self.page_up            # K
		k[337]               = self.page_up            # shift + cursor up

		k[43]                = self.inc_column_width   # +
		k[45]                = self.dec_column_width   # -
		k[63]                = self.show_help          # ?

		k[118]               = self.view_selected_file # v
		k[101]               = self.edit_selected_file # e
		k[115]               = self.open_shell         # s

		k[114]               = self.reload             # r
		k[curses.KEY_RESIZE] = self.resize             # resize event

		return k

	def _run_outside_curses(self, cmd_arr):
		curses.savetty()
		curses.endwin()
		p = subprocess.Popen(cmd_arr)
		p.wait()
		self.stdscr.refresh()
		curses.resetty()
		curses.curs_set(0)


	def view_selected_file(self):
		col = self.model.root_column.last()
		if col.selection_index < 0:
			return
		path_to_file = os.path.join(col.full_path, col.selected_name())
		self._run_outside_curses([CMD_VIEW, path_to_file])

	def edit_selected_file(self):
		col = self.model.root_column.last()
		if col.selection_index < 0:
			return
		path_to_file = os.path.join(col.full_path, col.selected_name())
		self._run_outside_curses([CMD_EDIT, path_to_file])

	def open_shell(self):
		col = self.model.root_column.last()
		if col.selection_index < 0:
			col = self.model.parent(col)
		while not(col.file_entries[col.selection_index].isdir):
			col = self.model.parent(col)
		path_to_file = os.path.join(col.full_path, col.selected_name())
		os.chdir(path_to_file)
		self._run_outside_curses([CMD_SHELL])
		self.model.reload()

	def move_left(self):
		self.model.move_left()

	def move_right(self):
		self.model.move_right()

	def move_down(self):
		self.model.focus_column.select_next()
		self.model.update_default_selection()

	def move_up(self):
		self.model.focus_column.select_prev()
		self.model.update_default_selection()

	def page_down(self):
		max_y, max_x = self.stdscr.getmaxyx()
		self.model.focus_column.select_next_n(max_y - 2)
		self.model.update_default_selection()

	def page_up(self):
		max_y, max_x = self.stdscr.getmaxyx()
		self.model.focus_column.select_prev_n(max_y - 2)
		self.model.update_default_selection()

	def dec_column_width(self):
		self.model.view.column_width -= 1
		if self.model.view.column_width < 5:
			self.model.view.column_width = 5

	def inc_column_width(self):
		self.model.view.column_width += 1

	def reload(self):
		self.model.reload()

	def show_help(self):
		self.model.view.show_help = True

	def resize(self):
		# nothing to do
		# screen is refreshed because there is a corresponding action
		pass

	def handle_key(self, key):
		#logging.info("Key is %d" % key)
		self.model.view.show_help = False
		if key in self.key_handlers:
			h = self.key_handlers[key]
			h() # execute key action
			self.model.view.write_screen(self.model.root_column)
		return key != 120 and key != 113 # q or x to exit


class LyonApp:
	@staticmethod
	def run(initial_folder):
		path_elements_with_empty_elements = os.path.normpath(initial_folder).split(os.sep)
		path_elements = [x for x in path_elements_with_empty_elements if x]
		
		stdscr = curses.initscr()
		curses.noecho();curses.cbreak();stdscr.keypad(1)

		controller = LyonController(stdscr, path_elements)

		err = None
		try:
			LyonApp.event_loop(stdscr, controller)
		except Exception, ex:
			err = traceback.format_exc()
		curses.nocbreak();stdscr.keypad(0);curses.echo()
		curses.endwin()
		if err:
			print(err)

	@staticmethod
	def event_loop(stdscr, controller):
		while (True):
			try:
				c = stdscr.getch()
			except KeyboardInterrupt:
				return
			if not(controller.handle_key(c)):
				return;



#logging.basicConfig(filename='lyon.log',level=logging.DEBUG)

args = sys.argv[1:]
if len(args) == 0:
	initial_folder = '.'
else:
	initial_folder = args[0]

LyonApp.run(os.path.abspath(initial_folder))

